plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

configurations {
	// Define custom configurations for component and integration tests
	componentTestImplementation.extendsFrom testImplementation
	integrationTestImplementation.extendsFrom testImplementation
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'io.r2dbc:r2dbc-h2'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.projectreactor.netty:reactor-netty' // Reactor Netty for reactive programming
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.3'

	// Lombok for reducing boilerplate code
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Jackson for JSON processing (typically included with Spring Boot WebFlux)
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// Reactor Test for testing reactive streams
	testImplementation 'io.projectreactor:reactor-test'

	// Spring Boot Test Starter for testing Spring Boot applications
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// WireMock dependency for integration testing
	testImplementation 'org.wiremock.integrations:wiremock-spring-boot:3.2.0'

	// Additional dependencies for component tests
	componentTestImplementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Additional dependencies for integration tests
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	integrationTestImplementation 'com.h2database:h2'
}

sourceSets {
	test {
		java {
			srcDirs = ['src/test/java/com/example/checkweather/unit']
		}
	}
	componentTest {
		java {
			srcDirs = ['src/test/java/com/example/checkweather/component']
		}
		resources {
			srcDir 'src/test/resources'
		}
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
	integrationTest {
		java {
			srcDirs = ['src/test/java/com/example/checkweather/blackbox']
		}
		resources {
			srcDir 'src/test/resources'
		}
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', 'test' // Unit test profile
}

task componentTest(type: Test) {
	description = 'Runs component tests'
	group = 'verification'
	testClassesDirs = sourceSets.componentTest.output.classesDirs
	classpath = sourceSets.componentTest.runtimeClasspath
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', 'component-test'
}

task integrationTest(type: Test) {
	description = 'Runs integration tests'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', 'test'
}


